"use strict";
// SPDX-FileCopyrightText: 2023 Alliander NV
//
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_client_mock_1 = require("aws-sdk-client-mock");
/* eslint-disable camelcase */
const jwt_decode_1 = require("jwt-decode");
const client_kms_1 = require("@aws-sdk/client-kms");
const index_sign_1 = require("../index.sign");
const kmsMock = (0, aws_sdk_client_mock_1.mockClient)(client_kms_1.KMSClient);
const VALID_IDENTITY_USER_ARN = 'arn:aws:sts:eu-central-1:123456789012:assumed-role/this-is-my-role-name/this-is-my-username';
const VALID_EVENT = {
    requestContext: {
        identity: {
            userArn: VALID_IDENTITY_USER_ARN
        }
    }
};
const CONTEXT = {};
describe('handlers/sign/sign.ts', () => {
    const OLD_ENV = process.env;
    beforeEach(() => {
        jest.resetModules();
        kmsMock.reset();
        process.env = { ...OLD_ENV };
    });
    afterEach(() => {
        kmsMock.reset();
        process.env = OLD_ENV;
    });
    test('it should respond bad request if no userIdentity is passed', async () => {
        const event = {
            requestContext: {}
        };
        const response = await (0, index_sign_1.handler)(event, CONTEXT);
        expect(response.statusCode).toEqual(400);
        expect(response.body).toEqual('Unable to resolve identity');
    });
    test('it should respond bad request if an invalid userIdentity is passed', async () => {
        const invalidServiceResponse = await (0, index_sign_1.handler)({
            requestContext: {
                identity: {
                    userArn: 'arn:aws:invalid-service:eu-central-1:123456789012:assumed-role/this-is-my-role-name/this-is-my-username'
                }
            }
        }, CONTEXT);
        expect(invalidServiceResponse.statusCode).toEqual(400);
        expect(invalidServiceResponse.body).toEqual('Unable to resolve identity');
        const invalidAccountIdResponse = await (0, index_sign_1.handler)({
            requestContext: {
                identity: {
                    userArn: 'arn:aws:sts:eu-central-1:account-id:assumed-role/this-is-my-role-name/this-is-my-username'
                }
            }
        }, CONTEXT);
        expect(invalidAccountIdResponse.statusCode).toEqual(400);
        expect(invalidAccountIdResponse.body).toEqual('Unable to resolve identity');
        const completelyInvalidArn = await (0, index_sign_1.handler)({
            requestContext: {
                identity: {
                    userArn: 'i-am-not-even-trying'
                }
            }
        }, CONTEXT);
        expect(completelyInvalidArn.statusCode).toEqual(400);
        expect(completelyInvalidArn.body).toEqual('Unable to resolve identity');
    });
    test('it should respond internal server error if no tag is present on the KMS key', async () => {
        kmsMock
            .on(client_kms_1.DescribeKeyCommand).resolves({
            KeyMetadata: {
                KeyId: 'key-1'
            }
        })
            .on(client_kms_1.ListResourceTagsCommand).resolves({
            Tags: [
                {
                    TagKey: 'NotTheKid',
                    TagValue: 'I won\'t be resolved'
                }
            ]
        });
        const response = await (0, index_sign_1.handler)(VALID_EVENT, CONTEXT);
        expect(response.statusCode).toEqual(500);
        expect(response.body).toEqual('KMS key is not correctly tagged');
    });
    test('it should respond internal server error if the KeyId is not in the metadata', async () => {
        kmsMock
            .on(client_kms_1.DescribeKeyCommand).resolves({});
        const response = await (0, index_sign_1.handler)(VALID_EVENT, CONTEXT);
        expect(response.statusCode).toEqual(500);
        expect(response.body).toEqual('KMS key could not be retrieved');
    });
    test('should sign correctly', async () => {
        jest
            .useFakeTimers()
            .setSystemTime(new Date('2020-01-01'));
        const b64Signature = Buffer.from('i-am-a-signature').toString('base64');
        const signature = base64ToArrayBuffer(b64Signature);
        kmsMock
            .on(client_kms_1.DescribeKeyCommand).resolves({
            KeyMetadata: {
                KeyId: 'key-1'
            }
        })
            .on(client_kms_1.ListResourceTagsCommand).resolves({
            Tags: [
                {
                    TagKey: 'jwk_kid',
                    TagValue: 'I am the KID from the JWK'
                }
            ]
        })
            .on(client_kms_1.SignCommand).resolves({
            Signature: signature
        });
        process.env.ISSUER = 'https://test-issuer.com';
        process.env.DEFAULT_AUDIENCE = 'api://default-aud';
        const response = await (0, index_sign_1.handler)(VALID_EVENT, CONTEXT);
        expect(response.statusCode).toEqual(200);
        const responseBody = JSON.parse(response.body);
        const token = responseBody.token;
        const decodedHeader = (0, jwt_decode_1.default)(token, { header: true });
        expect(decodedHeader.alg).toEqual('RS256');
        expect(decodedHeader.typ).toEqual('JWT');
        expect(decodedHeader.kid).toEqual('I am the KID from the JWK');
        const decodedToken = (0, jwt_decode_1.default)(token);
        expect(decodedToken.sub).toEqual('arn:aws:iam:eu-central-1:123456789012:role/this-is-my-role-name');
        expect(decodedToken.aud).toEqual('api://default-aud');
        expect(decodedToken.iss).toEqual('https://test-issuer.com');
        expect(decodedToken.exp - decodedToken.iat).toEqual(3600);
        expect(decodedToken.iat - decodedToken.nbf).toEqual(300);
        const tokenParts = responseBody.token.split('.');
        expect(tokenParts[2]).toEqual(`${b64Signature.replace('==', '')}`);
    });
});
function base64ToArrayBuffer(b64) {
    const byteString = atob(b64);
    const byteArray = new Uint8Array(byteString.length);
    for (let i = 0; i < byteString.length; i++) {
        byteArray[i] = byteString.charCodeAt(i);
    }
    return byteArray;
}
//# sourceMappingURL=data:application/json;base64,