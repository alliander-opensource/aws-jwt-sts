"use strict";
// SPDX-FileCopyrightText: 2023 Alliander NV
//
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_kms_1 = require("@aws-sdk/client-kms");
const base64url_1 = require("base64url");
const logger_1 = require("@aws-lambda-powertools/logger");
const KEY_ALIAS_CURRENT = process.env.CURRENT_KEY.toString();
const logger = new logger_1.Logger();
const handler = async (apiEvent, context) => {
    var _a, _b, _c, _d;
    const identityArn = getARNFromIdentity((_a = apiEvent.requestContext.identity) === null || _a === void 0 ? void 0 : _a.userArn);
    logger.debug(identityArn);
    if (identityArn === undefined || identityArn === null) {
        logger.info(`Unable to resolve identityArn for userArn: ${(_b = apiEvent.requestContext.identity) === null || _b === void 0 ? void 0 : _b.userArn}`);
        return respond('Unable to resolve identity', 400);
    }
    let aud = process.env.DEFAULT_AUDIENCE;
    if (apiEvent.queryStringParameters && apiEvent.queryStringParameters.aud) {
        aud = apiEvent.queryStringParameters.aud;
    }
    const kms = new client_kms_1.KMSClient({});
    // Get KeyID which will be sent as kid in JWT token
    const currentResponse = await kms.send(new client_kms_1.DescribeKeyCommand({ KeyId: `${KEY_ALIAS_CURRENT}` }));
    const currentKeyId = (_c = currentResponse.KeyMetadata) === null || _c === void 0 ? void 0 : _c.KeyId;
    if (currentKeyId === undefined) {
        return respond('KMS key could not be retrieved', 500);
    }
    // Retrieve Tags for KMS Key - the key is tagged with the `kid` from the JWK which is used in the JWT headers
    const listResourceTagsResponse = await kms.send(new client_kms_1.ListResourceTagsCommand({ KeyId: currentKeyId }));
    const kid = getTagValueFromTags('jwk_kid', (_d = listResourceTagsResponse.Tags) !== null && _d !== void 0 ? _d : []);
    if (kid == null) {
        return respond('KMS key is not correctly tagged', 500);
    }
    const iss = process.env.ISSUER;
    // JWT Token headers
    const headers = {
        alg: 'RS256',
        typ: 'JWT',
        kid: `${kid}`
    };
    // prepare token lifetime property values
    const issuedAtDate = new Date();
    const expirationDate = new Date(issuedAtDate);
    const notBeforeDate = new Date(issuedAtDate);
    expirationDate.setTime(expirationDate.getTime() + 60 * 60 * 1000); // valid for one hour
    notBeforeDate.setTime(notBeforeDate.getTime() - 5 * 60 * 1000); // 5m before issuedAtDate
    // JWT Token payload
    const payload = {
        sub: `${identityArn}`, // Set role arn as message for payload
        aud,
        iss,
        iat: Math.floor(issuedAtDate.getTime() / 1000),
        exp: Math.floor(expirationDate.getTime() / 1000),
        nbf: Math.floor(notBeforeDate.getTime() / 1000)
    };
    // Prepare message to be signed by KMS
    const tokenHeaders = (0, base64url_1.default)(JSON.stringify(headers));
    const tokenPayload = (0, base64url_1.default)(JSON.stringify(payload));
    // Sign message with KMS
    const signResponse = await kms.send(new client_kms_1.SignCommand({
        KeyId: currentKeyId,
        Message: Buffer.from(`${tokenHeaders}.${tokenPayload}`),
        SigningAlgorithm: 'RSASSA_PKCS1_V1_5_SHA_256',
        MessageType: 'RAW'
    }));
    logger.debug(JSON.stringify(signResponse));
    const signature = Buffer
        .from(signResponse.Signature)
        .toString('base64')
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=/g, '');
    const token = `${tokenHeaders}.${tokenPayload}.${signature}`;
    logger.debug(token);
    return respond(JSON.stringify({
        token
    }));
};
exports.handler = handler;
function respond(message, statusCode = 200) {
    return {
        statusCode,
        body: message
    };
}
function getARNFromIdentity(identityArn) {
    var _a, _b;
    if (identityArn === undefined || identityArn === null) {
        return null;
    }
    // Regex for converting arn to base role
    const captGroups = [
        'arn:aws:sts:',
        '(?<regionName>[^:]*)', // group 1
        ':',
        '(?<accountId>\\d{12})', // group 2
        ':assumed-role\\/',
        '(?<roleName>[A-z0-9\\-]+?)', // group 3
        '\\/',
        '(?<user>[^:]*)', // group 4
        '$'
    ];
    const regex = new RegExp(captGroups.join(''));
    const { regionName, accountId, roleName } = (_b = (_a = regex.exec(identityArn)) === null || _a === void 0 ? void 0 : _a.groups) !== null && _b !== void 0 ? _b : {};
    if (regionName === undefined || accountId === undefined || roleName === undefined) {
        return null;
    }
    // Build base role arn
    return `arn:aws:iam:${regionName}:${accountId}:role/${roleName}`;
}
function getTagValueFromTags(tagKey, tags) {
    for (const tag of tags) {
        if (tag.TagKey === tagKey) {
            return tag.TagValue;
        }
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,