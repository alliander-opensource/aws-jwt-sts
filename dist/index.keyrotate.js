"use strict";
// SPDX-FileCopyrightText: 2023 Alliander NV
//
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_kms_1 = require("@aws-sdk/client-kms");
const client_s3_1 = require("@aws-sdk/client-s3");
const jsrsasign_1 = require("jsrsasign");
const client = new client_kms_1.KMSClient({});
const ALIAS_PREVIOUS = process.env.PREVIOUS_KEY.toString();
const ALIAS_CURRENT = process.env.CURRENT_KEY.toString();
const ALIAS_PENDING = process.env.PENDING_KEY.toString();
const ALIASES = [
    ALIAS_PREVIOUS,
    ALIAS_CURRENT,
    ALIAS_PENDING
];
const handler = async (event) => {
    // retrieve the step from the event
    const step = (event.step);
    // match the step with the corresponding function
    switch (step) {
        case 'deletePrevious':
            await deletePrevious();
            break;
        case 'movePrevious':
            await movePrevious();
            break;
        case 'moveCurrent':
            await moveCurrent();
            break;
        case 'createPending':
            await createPending();
            break;
        case 'generateArtifacts':
            await generateJWKS();
            await generateOpenIDConfiguration();
            break;
        default:
            console.log('invalid step');
    }
};
exports.handler = handler;
async function deletePrevious() {
    console.log('Deleting PREVIOUS aliased key');
    const prevKeyId = await getKeyIdForAlias(ALIAS_PREVIOUS);
    if (prevKeyId) {
        const ScheduleDeleteResponse = await client.send(new client_kms_1.ScheduleKeyDeletionCommand({ KeyId: prevKeyId }));
        console.log(ScheduleDeleteResponse);
    }
    else {
        console.log('No PREVIOUS key at the moment, skip deletion');
    }
}
async function movePrevious() {
    console.log('moving PREVIOUS alias');
    const currentKeyId = await getKeyIdForAlias(ALIAS_CURRENT);
    if (currentKeyId) {
        await updateOrCreateAlias(ALIAS_PREVIOUS, currentKeyId);
    }
    else {
        console.log('No CURRENT key at the moment, skip assigning the PREVIOUS alias to this key.');
    }
}
async function moveCurrent() {
    console.log('Moving CURRENT alias');
    const pendingKeyId = await getKeyIdForAlias(ALIAS_PENDING);
    if (pendingKeyId) {
        await updateOrCreateAlias(ALIAS_CURRENT, pendingKeyId);
    }
    else {
        console.log('No PENDING key at the moment, skip assigning the CURRENT alias to this key.');
    }
}
async function createPending() {
    console.log('Creating new key for PENDING');
    // Create new key
    const createResponse = await client.send(new client_kms_1.CreateKeyCommand({
        KeySpec: 'RSA_2048',
        KeyUsage: 'SIGN_VERIFY'
    }));
    console.log(createResponse);
    // Update the new key with pending alias
    await updateOrCreateAlias(ALIAS_PENDING, createResponse.KeyMetadata.KeyId);
}
async function updateOrCreateAlias(aliasName, keyId) {
    try {
        const updateResponse = await client.send(new client_kms_1.UpdateAliasCommand({
            AliasName: aliasName,
            TargetKeyId: keyId
        }));
        console.log(updateResponse);
    }
    catch (err) {
        if (err instanceof client_kms_1.NotFoundException) {
            console.log('ALIAS not found, creating it.');
            const createResponse = await client.send(new client_kms_1.CreateAliasCommand({
                AliasName: aliasName,
                TargetKeyId: keyId
            }));
            console.log(createResponse);
        }
        else {
            throw (err);
        }
    }
}
async function getKeyIdForAlias(keyId) {
    var _a;
    try {
        const response = await client.send(new client_kms_1.DescribeKeyCommand({ KeyId: keyId }));
        console.log(response);
        return (_a = response.KeyMetadata) === null || _a === void 0 ? void 0 : _a.KeyId;
    }
    catch (err) {
        if (err instanceof client_kms_1.NotFoundException) {
            return null;
        }
        else {
            throw err;
        }
    }
}
async function generateJWKS() {
    const allKeys = [];
    for (const keyAlias of ALIASES) {
        const keyId = await getKeyIdForAlias(keyAlias);
        if (keyId) {
            const jwkContents = await generateJWK(keyAlias);
            await setKMSKeyTags(keyId, [{ TagKey: 'jwk_kid', TagValue: jwkContents.kid }]);
            allKeys.push(jwkContents);
        }
    }
    const result = { keys: allKeys };
    await uploadToS3('discovery/keys', result);
}
async function generateOpenIDConfiguration() {
    const issuer = process.env.ISSUER;
    const openIdConfiguration = {
        issuer,
        jwks_uri: `${issuer}/discovery/keys`,
        response_types_supported: [
            'token'
        ],
        id_token_signing_alg_values_supported: [
            'RS256'
        ],
        scopes_supported: [
            'openid'
        ],
        token_endpoint_auth_methods_supported: [
            'client_secret_basic'
        ],
        claims_supported: [
            'aud',
            'exp',
            'iat',
            'iss',
            'sub'
        ]
    };
    await uploadToS3('.well-known/openid-configuration', openIdConfiguration);
}
async function generateJWK(keyAlias) {
    // Get the public key from kms
    const getPubKeyResponse = await client.send(new client_kms_1.GetPublicKeyCommand({ KeyId: keyAlias }));
    // generate HEX format from the response (DER)
    const pubKeyHex = Buffer.from(getPubKeyResponse.PublicKey).toString('hex');
    // Get the pub key in pem format
    const pubKeyPem = jsrsasign_1.KJUR.asn1.ASN1Util.getPEMStringFromHex(pubKeyHex, 'PUBLIC KEY');
    // return the JWK format for the key
    const jwk = jsrsasign_1.KEYUTIL.getJWK(pubKeyPem);
    jwk.use = 'sig';
    jwk.alg = 'RS256';
    return jwk;
}
async function setKMSKeyTags(keyAlias, tags) {
    return await client.send(new client_kms_1.TagResourceCommand({ KeyId: keyAlias, Tags: tags }));
}
async function uploadToS3(key, contents) {
    // get S3 bucket from environment variables
    const s3Bucket = process.env.S3_BUCKET;
    const s3client = new client_s3_1.S3Client({});
    // Write jwk to s3 bucket
    await s3client.send(new client_s3_1.PutObjectCommand({
        Bucket: s3Bucket,
        Key: key, // File name you want to save as in S3
        Body: Buffer.from(JSON.stringify(contents)),
        ContentType: 'application/json',
        ContentEncoding: ''
    }));
}
//# sourceMappingURL=data:application/json;base64,